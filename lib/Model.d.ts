import { EventEmitter } from "events";
import { Packet } from "./Packet";
export declare class Model implements EventEmitter {
    uid: number;
    nm: string;
    tags: string[];
    private knownSessions;
    addListener: (event: string, listener: Function) => this;
    on: (event: string, listener: Function) => this;
    once: (event: string, listener: Function) => this;
    prependListener: (event: string, listener: Function) => this;
    prependOnceListener: (event: string, listener: Function) => this;
    removeListener: (event: string, listener: Function) => this;
    removeAllListeners: (event?: string) => this;
    getMaxListeners: () => number;
    setMaxListeners: (n: number) => this;
    listeners: (event: string) => Function[];
    emit: (event: string, ...args: any[]) => boolean;
    eventNames: () => string[];
    listenerCount: (type: string) => number;
    private static eventsForAllModels;
    static addListener: (event: string, listener: Function) => EventEmitter;
    static on: (event: string, listener: Function) => EventEmitter;
    static once: (event: string, listener: Function) => EventEmitter;
    static prependListener: (event: string, listener: Function) => EventEmitter;
    static prependOnceListener: (event: string, listener: Function) => EventEmitter;
    static removeListener: (event: string, listener: Function) => EventEmitter;
    static removeAllListeners: (event?: string) => EventEmitter;
    static getMaxListeners: () => number;
    static setMaxListeners: (n: number) => EventEmitter;
    static listeners: (event: string) => Function[];
    static emit: (event: string, ...args: any[]) => boolean;
    static eventNames: () => string[];
    static listenerCount: (type: string) => number;
    private static knownModels;
    constructor(uid: number, packet?: Packet);
    static getModel(id: any, createIfNecessary?: boolean): Model;
    static findModels(filter: (model: Model) => boolean): Model[];
    bestSessionId: number;
    bestSession: ModelSessionDetails;
    mergePacket(packet: Packet): void;
    private purgeOldSessions();
    reset(): void;
    static reset(): void;
    private static whenMap;
    static when(condition: whenFilter, onTrue: whenCallback, onFalseAfterTrue?: whenCallback): void;
    static removeWhen(condition: (m: Model) => boolean): boolean;
    private whenMap;
    when(condition: whenFilter, onTrue: whenCallback, onFalseAfterTrue?: whenCallback): void;
    removeWhen(condition: (m: Model) => boolean): boolean;
    private processWhens(packet);
    toString(): string;
}
export declare type whenFilter = (m: Model) => boolean;
export declare type whenCallback = (m: Model, p: Packet) => void;
export interface ModelSessionDetails extends BaseMessage, ModelDetailsMessage, UserDetailsMessage, SessionDetailsMessage {
    model_sw?: number;
    truepvt?: number;
    guests_muted?: number;
    basics_muted?: number;
    [index: string]: number | string | boolean;
}
